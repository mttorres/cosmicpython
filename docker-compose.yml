version: "3"
services:

  redis_pubsub:
    build:
      context: .
      dockerfile: Dockerfile
    image: allocation-image
    depends_on:
      - postgres
      - redis
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=abc123
      - REDIS_HOST=redis
      - PYTHONDONTWRITEBYTECODE=1
      - LOGLEVEL=DEBUG
    volumes:
      - ./src:/src
      - ./tests:/tests
    entrypoint:
      - python
      - /src/allocation/entrypoints/redis_eventconsumer.py

  api:
    image: allocation-image
    depends_on:
      - redis_pubsub
    # If you start to have enough
    # containers that information (ev vars) starts to be duplicated in these sections,
    # you can use environment_file instead. We usually call ours container.env.
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=abc123
      - API_HOST=api
      - REDIS_HOST=redis
      - PYTHONDONTWRITEBYTECODE=1
      # if you’re mounting volumes to share source folders between your local dev machine and the container,
      # the PYTHONDONTWRITEBYTECODE environment variable tells Python to not write .pyc files,
      # and that will save you from having millions of root-owned files sprinkled all over your
      #local filesystem, being all annoying to delete and causing weird Python compiler errors besides.
      # https://stackoverflow.com/questions/2998215/if-python-is-interpreted-what-are-pyc-files
      - FLASK_APP=allocation/entrypoints/flask_app.py
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
    volumes:
      # Mounting our source and test code as volumes means we don’t need
      # to rebuild our containers every time we make a code change.
      - ./src:/src
      - ./tests:/tests
    entrypoint:
      - flask
      - run
      - --host=0.0.0.0
      - --port=80
    ports:
      - "5005:80"


  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=allocation
      - POSTGRES_PASSWORD=abc123
    ports:
      - "54321:5432"


  redis:
    image: redis:alpine
    ports:
      - "63791:6379"
